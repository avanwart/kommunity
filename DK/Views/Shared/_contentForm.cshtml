@model BootBaronLib.AppSpec.DasKlub.BOL.UserContent.Content
           @using System.Linq;
@using BootBaronLib.Values
@using DasKlub.Helpers
@using Web.Helpers
@Html.HiddenFor(model => model.ContentID)
<div>
    <fieldset>
        <div class="editor-label">
            @Html.LabelFor(m => m.ReleaseDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.ReleaseDate , new { @style = "width:500px" })
            @Html.CSSClassValidationMessageFor(m => m.ReleaseDate)
        </div>
        <div class="editor-label">
            @Html.LabelFor(m => m.Title)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.Title, new { @style = "width:500px" })
            @Html.CSSClassValidationMessageFor(m => m.Title)
        </div>
        <div class="editor-label">
            @Html.LabelFor(m => m.MetaKeywords) <i>@BootBaronLib.Resources.Messages.SeperateWithCommas</i>
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.MetaKeywords, new { @style = "width:500px" })
        
            @Html.CSSClassValidationMessageFor(m => m.MetaKeywords)
        </div>
        <div class="editor-label">
            @Html.LabelFor(m => m.ContentPhotoThumbURL)  (.jpg) <i>(@BootBaronLib.Resources.Messages.Required)</i>
        </div>
        <div class="editor-field">
            @if (!string.IsNullOrEmpty(Model.ContentPhotoThumbURL)) 
            {
                <img src="@Html.S3ContentPath(Model.ContentPhotoThumbURL)"/> <br />
            }
            <input type="file" name="imageFile" />
            @Html.CSSClassValidationMessageFor(m => m.ContentPhotoThumbURL)
        
        </div>
        <div class="editor-label">
        <br />
            @Html.LabelFor(m => m.ContentVideoURL) (.mp4) <i>(@BootBaronLib.Resources.Messages.Optional)</i>
        </div>
        <div class="editor-field">
        
            @if (!string.IsNullOrEmpty(Model.ContentVideoURL))
            {

                @Html.ActionLink(@BootBaronLib.Resources.Messages.Delete,
                   "DeleteVideo","Account", new { id = Model.ContentID },
                  new
                  {
                      @class = "red",
                      onclick = "return confirm('" +
                      BootBaronLib.Resources.Messages.Delete + "?')"
                  })
  
                   
                    
                <div class="video_player">
                    <video   id="product_video" width="@ViewBag.VideoWidth" height="@ViewBag.VideoHeight"  
poster="@Html.S3ContentPath(Model.ContentPhotoURL)" controls="controls" preload="none">
	<!-- MP4 source must come first for iOS -->
	<source type="video/mp4" src="@Html.S3ContentPath(Model.ContentVideoURL)" />
@*	<!-- WebM for Firefox 4 and Opera -->
	<source type="video/webm" src="/content/media/echo-hereweare.webm" />
	<!-- OGG for Firefox 3 -->
	<source type="video/ogg" src="/content/media/echo-hereweare.ogv" />
	<!-- Fallback flash player for no-HTML5 browsers with JavaScript turned off -->*@
	<object width="@ViewBag.VideoWidth" height="@ViewBag.VideoHeight" type="application/x-shockwave-flash" 
    data="@Html.S3ContentPath(Model.ContentVideoURL)"> 		
		@* <param name="movie" value="@Url.Content("~/content/mediaelement/flashmediaelement.swf")" />  *@
		<param name="flashvars" value="controls=true&poster=@Html.S3ContentPath(Model.ContentPhotoURL)&file=@Html.S3ContentPath(Model.ContentVideoURL)" /> 		
		<!-- Image fall back for non-HTML5 browser with JavaScript turned off and no Flash player installed -->
		<img  
        src="@Html.S3ContentPath(Model.ContentVideoURL)"
         width="@ViewBag.VideoWidth"   alt="Here we are" 
			title="No video playback capabilities" />
	</object> 	
</video>
                </div>
                    
                    
                    
           
 

            }
            <input type="file" name="videoFile" />
        </div>


                <div class="editor-label">
        <br />
            @Html.LabelFor(m => m.ContentVideoURL2) (.webm) <i>(@BootBaronLib.Resources.Messages.Optional)</i>
        </div>
        <div class="editor-field">
        
            @if (!string.IsNullOrEmpty(Model.ContentVideoURL2))
            {

                @Html.ActionLink(@BootBaronLib.Resources.Messages.Delete,
                   "DeleteVideo", new { id = Model.ContentID },
                  new
                  {
                      @class = "red",
                      onclick = "return confirm('" +
                      BootBaronLib.Resources.Messages.Delete + "?')"
                  })

                   
          
                    
           
 

            }
            <input type="file" name="videoFile2" />
        </div>


        <div class="editor-label">
             <br />
            @Html.LabelFor(m => m.Language)
        </div>
        <div class="editor-field">
   
            @{
                var listItems = Enum.GetValues(typeof(SiteEnums.SiteLanguages)).OfType<Enum>().Select(e =>
            new SelectListItem()
            {
                Text = BootBaronLib.Operational.Utilities.ResourceValue(BootBaronLib.Operational.Utilities.GetEnumDescription(e)),
                Value = e.ToString(),
                Selected = e.Equals(Model)
            }).OrderBy(x => x.Value.ToString());
                string prefix = "Language";
                int index = 0;

          
                foreach (var li in listItems)
                {
                    string fieldName = string.Format(System.Globalization.CultureInfo.InvariantCulture,
                        "{0}_{1}", prefix, index++);

                    if (Model.Language.ToString().ToLower() == li.Value.ToLower() || string.IsNullOrWhiteSpace(Model.Language) && li.Value.ToLower() == 
                        BootBaronLib.Operational.Utilities.GetCurrentLanguageCode().ToLower())
                    {
                        li.Selected = true;
                    }
                <div style="float: left; padding-right: 25px;">
                    @Html.RadioButton(prefix, li.Value, li.Selected, new { @id = fieldName })
                    @Html.Label(fieldName, li.Text)</div>
    
                }

                <div class="clear">
                </div>
                <br />
            }
        </div>
        <div class="editor-label">
            @Html.LabelFor(m => m.MetaDescription)   <i>@BootBaronLib.Resources.Messages.BriefDescription</i>
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(m => m.MetaDescription, new { @style = "width:500px;height:75px" })
            @Html.CSSClassValidationMessageFor(m => m.MetaDescription)
             
        </div>
        <script type="text/javascript" src="@Url.Content("~/content/script/nicEdit.js")"></script>
        <div class="editor-label">
            @Html.LabelFor(m => m.Detail)
        </div>
        <div class="editor-field">
            <script type="text/javascript">
                var area1;
                function toggleArea1() {
                    if (!area1) {
                        area1 = new nicEditor({ fullPanel: true }).panelInstance('Detail',
                    { hasPanel: true });
                    } else {
                        area1.removeInstance('Detail');
                        area1 = null;
                    }
                }

                bkLib.onDomLoaded(function () { toggleArea1(); });
            </script>
            <textarea style="background-color: #FFF; width: 700px; min-height: 200px;" id="Detail" name="Detail"
                cols="100">@Model.ContentDetail</textarea>
            @*     @Html.TextAreaFor(m => m.Detail, new { @style = "width:500px;height:300px" })*@
            @Html.CSSClassValidationMessageFor(m => m.Detail)
        </div>
    </fieldset>
</div>
