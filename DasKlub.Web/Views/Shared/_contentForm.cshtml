@using System.Globalization
@using DasKlub.Lib.Operational
@using DasKlub.Lib.Resources
@using DasKlub.Lib.Values
@using DasKlub.Web.Helpers
@model DasKlub.Lib.BOL.UserContent.Content
@Html.HiddenFor(model => model.ContentID)
<div>
    <fieldset>
        <div class="editor-label">
            @Html.LabelFor(m => m.ReleaseDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.ReleaseDate, new {@style = "width:500px"})
            @Html.CSSClassValidationMessageFor(m => m.ReleaseDate)
        </div>
        <div class="editor-label">
            @Html.LabelFor(m => m.Title)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.Title, new {@style = "width:500px"})
            @Html.CSSClassValidationMessageFor(m => m.Title)
        </div>
        <div class="editor-label">
            @Html.LabelFor(m => m.MetaKeywords) <i>@Messages.SeperateWithCommas</i>
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.MetaKeywords, new {@style = "width:500px"})
        
            @Html.CSSClassValidationMessageFor(m => m.MetaKeywords)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(m => m.MetaDescription)   <i>@Messages.BriefDescription</i>
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(m => m.MetaDescription, new {@style = "height:75px;width:500px;"})
            @Html.CSSClassValidationMessageFor(m => m.MetaDescription)
             
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(m => m.CreatedByUserID)  
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.CreatedByUserID)
         
        </div>


        <div class="editor-label">
            @Html.LabelFor(m => m.ContentPhotoThumbURL)  (.jpg) <i>(@Messages.Required)</i>
        </div>
        <div class="editor-field">
            @if (!string.IsNullOrEmpty(Model.ContentPhotoThumbURL))
            {
                <img src="@Html.S3ContentPath(Model.ContentPhotoThumbURL)"/>
                <br />
            }
            <input type="file" name="imageFile" />
            @Html.CSSClassValidationMessageFor(m => m.ContentPhotoThumbURL)
        
        </div>
        <div class="editor-label">
            <br />
            @Html.LabelFor(m => m.ContentVideoURL) (.mp4) <i>(@Messages.Optional)</i>
        </div>
        <div class="editor-field">
        
            @if (!string.IsNullOrEmpty(Model.ContentVideoURL))
            {
                @Html.ActionLink(Messages.Delete,
                    "DeleteVideo", "Account", new {id = Model.ContentID},
                    new
                    {
                        @class = "red",
                        onclick = "return confirm('" +
                                  Messages.Delete + "?')"
                    })

                <img src="@Html.S3ContentPath(Model.ContentPhotoURL)"/>
            }
            <input type="file" name="videoFile" />
        </div>


        <div class="editor-label">
            <br />
            @Html.TextBoxFor(m => m.ContentVideoURL2) (youtube) <i>(@Messages.Optional)</i>
        </div>
        <div class="editor-field">
        
            @if (!string.IsNullOrEmpty(Model.ContentVideoURL2))
            {
                @Html.ActionLink(Messages.Delete,
                    "DeleteVideo", new {id = Model.ContentID},
                    new
                    {
                        @class = "red",
                        onclick = "return confirm('" +
                                  Messages.Delete + "?')"
                    })
            }
     @*       <input type="file" name="videoFile2" />*@</div>


        <div class="editor-label">
            <br />
            @Html.LabelFor(m => m.Language)
        </div>
        <div class="editor-field">
            
            
            
          
       

   
            @{
                IOrderedEnumerable<SelectListItem> listItems = Enum.GetValues(typeof (SiteEnums.SiteLanguages)).OfType<Enum>().Select(e =>
                    new SelectListItem
                    {
                        Text = Utilities.ResourceValue(Utilities.GetEnumDescription(e)),
                        Value = e.ToString(),
                        Selected = e.Equals(Model)
                    }).OrderBy(x => x.Value.ToString());
                string prefix = "Language";
                int index = 0;

                <select id="news_langugue_option" class="span3"  name="Language">
                    @foreach (SelectListItem li in listItems)
                    {
                        string fieldName = string.Format(CultureInfo.InvariantCulture,
                            "{0}_{1}", prefix, index++);

                        if (Model.Language.ToLower() == li.Value.ToLower() || string.IsNullOrWhiteSpace(Model.Language) && li.Value.ToLower() ==
                            Utilities.GetCurrentLanguageCode().ToLower())
                        {
                            <option selected="selected" value="@li.Value" >@li.Text</option>
                        }
                        else
                        {
                            <option value="@li.Value" >@li.Text</option>
                        }
                    }
                </select>
                <div class="clear">
                </div>
                <br />
            }
        </div>

        <script type="text/javascript" src="@Url.Content("~/content/script/nicEdit.js")"> </script>
        <div class="editor-label">
            @Html.LabelFor(m => m.Detail)
        </div>
        <div class="editor-field">
            
     
            
            
            <textarea class="ckeditor" name="Detail">@if (Model != null)
                                                     {
                                                         @Model.Detail
                                                     }</textarea>
            
            
            
            @Html.CSSClassValidationMessageFor(m => m.Detail)
            
            <script src="~/Scripts/ckeditor/ckeditor.js"> </script>

        </div>
    </fieldset>
</div>